/**
 * @section Variables
 *
 * There are a number of pre-defined global variables that you can use.
 */
/**
 * @section Variables
 * @subsection Colors
 *
 * These are the only color that should be used within the application.
 */
/**
 * @var $color-rosewood
 */
/**
 * @var $color-maroon
 */
/**
 * @var $color-medium-carmine
 * @var $color-medium-carmine-l50
 * @var $color-medium-carmine-d30
 */
/**
 * @var $color-dawn-pink
 */
/**
 * @var $color-crusoe
 */
/**
 * @var $color-japanese-laurel
 */
/**
 * @var $color-apple
 * @var $color-apple-l50
 * @var $color-apple-d30
 */
/**
 * @var $color-panache
 */
/**
 * @var $color-downriver
 */
/**
 * @var $color-dark-blue
 */
/**
 * @var $color-san-marino
 */
/**
 * @var $color-chetwode-blue
 */
/**
 * @var $color-snuff
 */
/**
 * @var $color-olive
 */
/**
 * @var $color-rio-grande
 */
/**
 * @var $color-yellow
 */
/**
 * @var $color-portafino
 */
/**
 * @var $color-black
 */
/**
 * @var $color-tundora
 */
/**
 * @var $color-gray
 */
/**
 * @var $color-silver-chalice
 */
/**
 * @var $color-silver
 * @var $color-silver-d20
 */
/**
 * @var $color-gallery
 */
/**
 * @var $color-white
 * @var $color-white-d15
 */
/**
 * @section Variables
 * @subsection Percentage
 *
 * General percentage values.
 *
 * @todo see if we can get rid of these
 *
 * @var $percentage-dark
 * @var $percentage-darker
 * @var $percentage-darkest
 * @var $percentage-light
 * @var $percentage-lighter
 * @var $percentage-lightest
 */
/**
 * @section Variables
 * @subsection Font
 *
 * Variables that deal with fonts.
 *
 * @var $font-size
 * @var $font-family
 */
/**
 * @section Variables
 * @subsection Safe Colors
 *
 * These are colors used to indicator something is safe.
 *
 * @var $border-color-safe
 * @var $background-color-safe
 * @var $color-safe
 */
/**
 * @section Variables
 * @subsection Danger Colors
 *
 * These are colors used to indicator something is dangerous.
 *
 * @var $border-color-danger
 * @var $background-color-danger
 * @var $color-danger
 */
/**
 * @section Variables
 * @subsection Notice Colors
 *
 * These are colors used to indicator something is a notice.
 *
 * @var $border-color-notice
 * @var $background-color-notice
 * @var $color-notice
 */
/**
 * @section Variables
 * @subsection Caution Colors
 *
 * These are colors used to indicator something you should be cautious with.
 *
 * @var $border-color-caution
 * @var $background-color-caution
 * @var $color-caution
 */
/**
 * @section Variables
 * @subsection Button Drop Downs
 *
 * These are the variables that control the looked and feel of the button drop downs.
 *
 *
 * @var $color-bdd
 * @var $background-color-content-bdd
 * @var $border-bdd
 * @var $font-weight-bdd
 * @var $border-radius-bdd
 * @var $z-index-button-bdd
 * @var $z-index-button-is-active-bdd
 * @var $z-index-content-bdd
 * @var $padding-content-bdd
 */
/**
 * @section Variables
 * @subsection Buttons
 *
 * These are the variables that control the look and feel of the buttons.
 *
 *
 * @var $background-color-button
 * @var $color-button
 * @var $border-radius-button
 * @var $font-weight-button
 * @var $is-uppercased-button
 * @var $font-size-small-button
 * @var $padding-small-button
 * @var $font-size-button
 * @var $padding-button
 * @var $font-size-large-button
 * @var $padding-large-button
 * @var $font-size-largest-button
 * @var $padding-largest-button
 * @var $opacity-disabled-button
 */
/**
 * @section Variables
 * @subsection Cards
 *
 * These are the variables that control the look and feel of the cards.
 *
 *
 * @var $margin-card
 * @var $border-radius-card
 * @var $border-card
 * @var $background-color-content-card
 * @var $font-weight-header-card
 * @var $padding-header-card
 * @var $border-bottom-header-card
 * @var $color-header-card
 * @var $padding-content-card
 * @var $border-bottom-header-card
 * @var $background-color-header-card
 * @var $top-header-actions-card
 * @var $right-header-actions-card
 * @var $width-header-actions-svg-card
 * @var $height-header-actions-svg-card
 * @var $margin-left-header-actions-svg-card
 */
/**
 * @section Variables
 * @subsection Extend Text
 *
 * These are the variable the control the look and feel of the extend text.
 *
 * @var $border-radius-et
 * @var $z-index-et
 * @var $top-new-indicator-et
 * @var $right-new-indicator-et
 */
/**
 * @section Variables
 * @subsection Tagging
 *
 * These are the variable the control the look and feel of the tagging.
 *
 * @var $z-index-container-tagging
 * @var $margin-tag-tagging
 * @var $background-color-tag-tagging
 * @var $border-tag-tagging
 * @var $border-radius-tag-tagging
 * @var $padding-tag-tagging
 * @var $border-color-selected-tag-tagging
 * @var $width-tag-remove-icon-tagging
 * @var $height-tag-remove-icon-tagging
 */
/**
 * @section Variables
 * @subsection Search Query
 *
 * These are the variable the control the look and feel of the search query.
 * @var $height-input-sq
 * @var $color-icon-empty-sq
 * @var $padding-textarea-sq
 * @var $top-tooltip-sq
 * @var $right-tooltip-sq
 * @var $text-align-tooltip-content-sq
 * @var $border-tooltip-content-sq
 * @var $border-radius-tooltip-content-sq
 */
/**
 * @section Variables
 * @subsection Forms
 *
 * These are the variables the control the look and feel of form.
 *
 * @var $text-align-compact-label
 * @var $padding-compact-label
 * @var $border-radius-input
 * @var $border-input
 * @var $padding-input
 * @var $opacity-disabled-input
 * @var $margin-label
 * @var $box-shadow-focused-input
 * @var $height-select
 */
/**
 * @section Variables
 * @subsection Input Element
 *
 * These are the elements that control the look and feel of the input element.
 *
 * @var $padding-right-input-text-ie
 * @var $top-tooltip-icon-ie
 * @var $right-tooltip-icon-ie
 * @var $right-select-tooltip-icon-ie
 * @var $top-checkbox-tooltip-icon-ie
 * @var $right-checkbox-tooltip-icon-ie
 * @var $top-radio-tooltip-icon-ie
 * @var $right-radio-tooltip-icon-ie
 * @var $top-checkbox-tooltip-icon-compact-ie
 * @var $top-radio-tooltip-icon-compact-ie
 * @var $box-shadow-invalid-ie
 * @var $box-shadow-valid-ie
 */
/**
 * @section Variables
 * @subsection Messages
 *
 * These are the variables that control the look and feel of messages.
 *
 * @var $padding-message
 * @var $border-message
 * @var $border-radius
 * @var $width-icon-message
 * @var $height-icon-message
 * @var $padding-icon-message
 * @var $border-radius-icon-message
 * @var $top-icon-message
 * @var $left-icon-message
 */
/**
 * @section Variables
 * @subsection Notify
 *
 * These are the variables that control the look and feel for notifications.
 *
 * @var $z-index-notify
 */
/**
 * @section Variables
 * @subsection Progress Baar
 *
 * These are the variables the control the look and feel for progress bars.
 *
 * @var $border-pb
 * @var $min-width-pb
 * @var $height-pb
 * @var $border-radius-pb
 * @var $background-color-indicator-pb
 */
/**
 * @section Variables
 * @subsection Revealing Panel
 *
 * These are the variables that control the look and feel of the revealing panel.
 *
 * @var $border-radius-center-rp
 * @var $border-rp
 * @var $z-index-content-rp
 * @var $background-color-content-rp
 * @var $padding-content-rp
 */
/**
 * @section Variables
 * @subsection Site Loader
 *
 * These are the variables that control the look and feel of the site loader.
 *
 * @var $background-color-sl
 * @var $z-index-sl
 * @var $padding-text-sl
 * @var $text-align-text-sl
 */
/**
 * @section Variables
 * @subsection Site Overlay
 *
 * These are the variables that control the look and feel of the site overlay.
 *
 * @var $background-color-so
 * @var $opacity-so
 * @var $z-index-so
 */
/**
 * @section Variables
 * @subsection SVG Icons
 *
 * These are the variables the control the look and feel of SVG icons.
 *
 * @var $width-si
 * @var $height-si
 */
/**
 * @section Variables
 * @subsection Tabs
 *
 * These are the variables that control the look and feel for tabs.
 *
 * @var $margin-tabs
 * @var $padding-tabs
 * @var $padding-tab-tabs
 * @var $border-tabs
 * @var $background-color-tab-is-active-tabs
 */
/**
 * @section Variables
 * @subsection Tooltip
 *
 * These are the variables that control the look and feel for the tabs.
 *
 * @var $padding-content-tooltip
 * @var $background-content-tooltip
 * @var $border-content-tooltip
 */
/**
 * @section Variables
 * @subsection Tree
 *
 * These are the variables that control the look and feel for trees.
 *
 * @var $padding-tree
 * @var $padding-no-icon-tree
 * @var $width-icon-tree
 * @var $height-icon-tree
 * @var $margin-icon-tree
 */
/**
 * @section Variables
 * @subsection Headings
 *
 * These are the variables that control the look and feel of headings (h1 ... h6).
 *
 * @var $font-size-h1
 * @var $margin-h1
 * @var $font-size-h2
 * @var $margin-h2
 * @var $font-size-h3
 * @var $margin-h3
 * @var $font-size-h4
 * @var $margin-h4
 * @var $font-size-h5
 * @var $margin-h5
 * @var $font-size-h6
 * @var $margin-h6
 */
/**
 * @section Variables
 * @subsection Auto Complete
 *
 * These are the variable the control the look and feel of the auto complete.
 *
 * @var $border-options-ac
 * @var $background-color-options-ac
 * @var $max-height-options-ac
 * @var $padding-options-ac-option-et
 * @var $background-color-option-is-focused-ac
 */
/**
 * @section Variables
 *
 * There are a number of pre-defined global variables that you can use.
 */
/**
 * @section Variables
 * @subsection Colors
 *
 * These are the only color that should be used within the application.
 */
/**
 * @var $color-rosewood
 */
/**
 * @var $color-maroon
 */
/**
 * @var $color-medium-carmine
 * @var $color-medium-carmine-l50
 * @var $color-medium-carmine-d30
 */
/**
 * @var $color-dawn-pink
 */
/**
 * @var $color-crusoe
 */
/**
 * @var $color-japanese-laurel
 */
/**
 * @var $color-apple
 * @var $color-apple-l50
 * @var $color-apple-d30
 */
/**
 * @var $color-panache
 */
/**
 * @var $color-downriver
 */
/**
 * @var $color-dark-blue
 */
/**
 * @var $color-san-marino
 */
/**
 * @var $color-chetwode-blue
 */
/**
 * @var $color-snuff
 */
/**
 * @var $color-olive
 */
/**
 * @var $color-rio-grande
 */
/**
 * @var $color-yellow
 */
/**
 * @var $color-portafino
 */
/**
 * @var $color-black
 */
/**
 * @var $color-tundora
 */
/**
 * @var $color-gray
 */
/**
 * @var $color-silver-chalice
 */
/**
 * @var $color-silver
 * @var $color-silver-d20
 */
/**
 * @var $color-gallery
 */
/**
 * @var $color-white
 * @var $color-white-d15
 */
/**
 * @section Variables
 * @subsection Percentage
 *
 * General percentage values.
 *
 * @todo see if we can get rid of these
 *
 * @var $percentage-dark
 * @var $percentage-darker
 * @var $percentage-darkest
 * @var $percentage-light
 * @var $percentage-lighter
 * @var $percentage-lightest
 */
/**
 * @section Variables
 * @subsection Font
 *
 * Variables that deal with fonts.
 *
 * @var $font-size
 * @var $font-family
 */
/**
 * @section Variables
 * @subsection Safe Colors
 *
 * These are colors used to indicator something is safe.
 *
 * @var $border-color-safe
 * @var $background-color-safe
 * @var $color-safe
 */
/**
 * @section Variables
 * @subsection Danger Colors
 *
 * These are colors used to indicator something is dangerous.
 *
 * @var $border-color-danger
 * @var $background-color-danger
 * @var $color-danger
 */
/**
 * @section Variables
 * @subsection Notice Colors
 *
 * These are colors used to indicator something is a notice.
 *
 * @var $border-color-notice
 * @var $background-color-notice
 * @var $color-notice
 */
/**
 * @section Variables
 * @subsection Caution Colors
 *
 * These are colors used to indicator something you should be cautious with.
 *
 * @var $border-color-caution
 * @var $background-color-caution
 * @var $color-caution
 */
/**
 * @section Variables
 * @subsection Button Drop Downs
 *
 * These are the variables that control the looked and feel of the button drop downs.
 *
 *
 * @var $color-bdd
 * @var $background-color-content-bdd
 * @var $border-bdd
 * @var $font-weight-bdd
 * @var $border-radius-bdd
 * @var $z-index-button-bdd
 * @var $z-index-button-is-active-bdd
 * @var $z-index-content-bdd
 * @var $padding-content-bdd
 */
/**
 * @section Variables
 * @subsection Buttons
 *
 * These are the variables that control the look and feel of the buttons.
 *
 *
 * @var $background-color-button
 * @var $color-button
 * @var $border-radius-button
 * @var $font-weight-button
 * @var $is-uppercased-button
 * @var $font-size-small-button
 * @var $padding-small-button
 * @var $font-size-button
 * @var $padding-button
 * @var $font-size-large-button
 * @var $padding-large-button
 * @var $font-size-largest-button
 * @var $padding-largest-button
 * @var $opacity-disabled-button
 */
/**
 * @section Variables
 * @subsection Cards
 *
 * These are the variables that control the look and feel of the cards.
 *
 *
 * @var $margin-card
 * @var $border-radius-card
 * @var $border-card
 * @var $background-color-content-card
 * @var $font-weight-header-card
 * @var $padding-header-card
 * @var $border-bottom-header-card
 * @var $color-header-card
 * @var $padding-content-card
 * @var $border-bottom-header-card
 * @var $background-color-header-card
 * @var $top-header-actions-card
 * @var $right-header-actions-card
 * @var $width-header-actions-svg-card
 * @var $height-header-actions-svg-card
 * @var $margin-left-header-actions-svg-card
 */
/**
 * @section Variables
 * @subsection Extend Text
 *
 * These are the variable the control the look and feel of the extend text.
 *
 * @var $border-radius-et
 * @var $z-index-et
 * @var $top-new-indicator-et
 * @var $right-new-indicator-et
 */
/**
 * @section Variables
 * @subsection Tagging
 *
 * These are the variable the control the look and feel of the tagging.
 *
 * @var $z-index-container-tagging
 * @var $margin-tag-tagging
 * @var $background-color-tag-tagging
 * @var $border-tag-tagging
 * @var $border-radius-tag-tagging
 * @var $padding-tag-tagging
 * @var $border-color-selected-tag-tagging
 * @var $width-tag-remove-icon-tagging
 * @var $height-tag-remove-icon-tagging
 */
/**
 * @section Variables
 * @subsection Search Query
 *
 * These are the variable the control the look and feel of the search query.
 * @var $height-input-sq
 * @var $color-icon-empty-sq
 * @var $padding-textarea-sq
 * @var $top-tooltip-sq
 * @var $right-tooltip-sq
 * @var $text-align-tooltip-content-sq
 * @var $border-tooltip-content-sq
 * @var $border-radius-tooltip-content-sq
 */
/**
 * @section Variables
 * @subsection Forms
 *
 * These are the variables the control the look and feel of form.
 *
 * @var $text-align-compact-label
 * @var $padding-compact-label
 * @var $border-radius-input
 * @var $border-input
 * @var $padding-input
 * @var $opacity-disabled-input
 * @var $margin-label
 * @var $box-shadow-focused-input
 * @var $height-select
 */
/**
 * @section Variables
 * @subsection Input Element
 *
 * These are the elements that control the look and feel of the input element.
 *
 * @var $padding-right-input-text-ie
 * @var $top-tooltip-icon-ie
 * @var $right-tooltip-icon-ie
 * @var $right-select-tooltip-icon-ie
 * @var $top-checkbox-tooltip-icon-ie
 * @var $right-checkbox-tooltip-icon-ie
 * @var $top-radio-tooltip-icon-ie
 * @var $right-radio-tooltip-icon-ie
 * @var $top-checkbox-tooltip-icon-compact-ie
 * @var $top-radio-tooltip-icon-compact-ie
 * @var $box-shadow-invalid-ie
 * @var $box-shadow-valid-ie
 */
/**
 * @section Variables
 * @subsection Messages
 *
 * These are the variables that control the look and feel of messages.
 *
 * @var $padding-message
 * @var $border-message
 * @var $border-radius
 * @var $width-icon-message
 * @var $height-icon-message
 * @var $padding-icon-message
 * @var $border-radius-icon-message
 * @var $top-icon-message
 * @var $left-icon-message
 */
/**
 * @section Variables
 * @subsection Notify
 *
 * These are the variables that control the look and feel for notifications.
 *
 * @var $z-index-notify
 */
/**
 * @section Variables
 * @subsection Progress Baar
 *
 * These are the variables the control the look and feel for progress bars.
 *
 * @var $border-pb
 * @var $min-width-pb
 * @var $height-pb
 * @var $border-radius-pb
 * @var $background-color-indicator-pb
 */
/**
 * @section Variables
 * @subsection Revealing Panel
 *
 * These are the variables that control the look and feel of the revealing panel.
 *
 * @var $border-radius-center-rp
 * @var $border-rp
 * @var $z-index-content-rp
 * @var $background-color-content-rp
 * @var $padding-content-rp
 */
/**
 * @section Variables
 * @subsection Site Loader
 *
 * These are the variables that control the look and feel of the site loader.
 *
 * @var $background-color-sl
 * @var $z-index-sl
 * @var $padding-text-sl
 * @var $text-align-text-sl
 */
/**
 * @section Variables
 * @subsection Site Overlay
 *
 * These are the variables that control the look and feel of the site overlay.
 *
 * @var $background-color-so
 * @var $opacity-so
 * @var $z-index-so
 */
/**
 * @section Variables
 * @subsection SVG Icons
 *
 * These are the variables the control the look and feel of SVG icons.
 *
 * @var $width-si
 * @var $height-si
 */
/**
 * @section Variables
 * @subsection Tabs
 *
 * These are the variables that control the look and feel for tabs.
 *
 * @var $margin-tabs
 * @var $padding-tabs
 * @var $padding-tab-tabs
 * @var $border-tabs
 * @var $background-color-tab-is-active-tabs
 */
/**
 * @section Variables
 * @subsection Tooltip
 *
 * These are the variables that control the look and feel for the tabs.
 *
 * @var $padding-content-tooltip
 * @var $background-content-tooltip
 * @var $border-content-tooltip
 */
/**
 * @section Variables
 * @subsection Tree
 *
 * These are the variables that control the look and feel for trees.
 *
 * @var $padding-tree
 * @var $padding-no-icon-tree
 * @var $width-icon-tree
 * @var $height-icon-tree
 * @var $margin-icon-tree
 */
/**
 * @section Variables
 * @subsection Headings
 *
 * These are the variables that control the look and feel of headings (h1 ... h6).
 *
 * @var $font-size-h1
 * @var $margin-h1
 * @var $font-size-h2
 * @var $margin-h2
 * @var $font-size-h3
 * @var $margin-h3
 * @var $font-size-h4
 * @var $margin-h4
 * @var $font-size-h5
 * @var $margin-h5
 * @var $font-size-h6
 * @var $margin-h6
 */
/**
 * @section Variables
 * @subsection Auto Complete
 *
 * These are the variable the control the look and feel of the auto complete.
 *
 * @var $border-options-ac
 * @var $background-color-options-ac
 * @var $max-height-options-ac
 * @var $padding-options-ac-option-et
 * @var $background-color-option-is-focused-ac
 */
* {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }

/*! normalize.css v3.0.1 | MIT License | git.io/normalize */
/* MODIFIED */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 * 3. Reset font size so 1rem == 10px
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
  font-size: 62.5%;
  /* 3 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0;
  font-size: 1.3rem; }

p {
  margin: .5em 0; }

ul {
  margin: 0;
  padding: 0;
  list-style: none; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11 and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

::-webkit-input-placeholder {
  font-style: italic;
  font-size: 13px; }

::-moz-placeholder {
  font-style: italic;
  font-size: 13px; }

:-ms-input-placeholder {
  font-style: italic;
  font-size: 13px; }

h1 {
  font-size: 3.2rem;
  margin: 0 0 1rem 0; }

h2 {
  font-size: 2.4rem;
  margin: 0 0 1rem 0; }

h3 {
  font-size: 1.8rem;
  margin: 0 0 1rem 0; }

h4 {
  font-size: 1.5rem;
  margin: 0 0 1rem 0; }

h5 {
  font-size: 1.3rem;
  margin: 0 0 1rem 0; }

h6 {
  font-size: 1.1rem;
  margin: 0 0 1rem 0; }

a {
  color: #0002ab;
  text-decoration: none; }

body {
  color: #414141; }

.safe-text {
  color: #007e01; }

.notice-text {
  color: #0002ab; }

.caution-text {
  color: #7e7e00; }

.danger-text {
  color: #7a0200; }

/**
 * @section Animations
 *
 * This is the collection of the animations that are defined.
 */
/**
 * @section Animations
 * subsection Fade In
 * @animation fadeIn
 *
 * Provides a smooth animation of the element's `opacity` from `0` to `1`.
 */
@-webkit-keyframes fadeIn {
  0% {
    opacity: 0; }

  100% {
    opacity: 1; } }
@-moz-keyframes fadeIn {
  0% {
    opacity: 0; }

  100% {
    opacity: 1; } }
@-o-keyframes fadeIn {
  0% {
    opacity: 0; }

  100% {
    opacity: 1; } }
@keyframes fadeIn {
  0% {
    opacity: 0; }

  100% {
    opacity: 1; } }
/**
 * @section Animations
 * @subsection Fade Out
 * @animation fadeOut
 *
 * Provides a smooth animation of the element's `opacity` from `1` to `0` and also adds `display: none` at the end of the animation.
 */
@-webkit-keyframes fadeOut {
  0% {
    opacity: 1; }

  100% {
    opacity: 0;
    display: none; } }
@-moz-keyframes fadeOut {
  0% {
    opacity: 1; }

  100% {
    opacity: 0;
    display: none; } }
@-o-keyframes fadeOut {
  0% {
    opacity: 1; }

  100% {
    opacity: 0;
    display: none; } }
@keyframes fadeOut {
  0% {
    opacity: 1; }

  100% {
    opacity: 0;
    display: none; } }
/**
 * @section Utility
 *
 * There are a number of classes that can be used to add certain effects to an element.  All utility classes and prepended with `u-`.
 */
/**
 * @section Utility
 * @subsection Hiding
 *
 * In order to hide an element, just add the `u-hide` class.
 *
 * ```html
 * <div>this should be shown</div>
 * <div class="u-hide">this should not be shown</div>
 * ```
 */
.u-hide {
  display: none; }

/**
 * @section Utility
 * @subsection Centering
 *
 * Sometimes you want to be able to center and element and there are 3 utility classes for this.
 *
 * The first class in `u-center` with will center the element both vertically and horizontally.
 *
 * ```html
 * <div style="width: 100px; height: 100px; position: relative; background-color: green;">
 *   <div class="u-center" style="width: 25px; height: 25px; background-color: red"></div>
 * </div>
 * ```
 *
 * The second class in `u-center-vertical` with will center the element vertically.
 *
 * ```html
 * <div style="width: 100px; height: 100px; position: relative; background-color: green;">
 *   <div class="u-center-vertical" style="width: 25px; height: 25px; background-color: red"></div>
 * </div>
 * ```
 *
 * The last class in `u-center-horizontal` with will center the element horizontally.
 *
 * ```html
 * <div style="width: 100px; height: 100px; position: relative; background-color: green;">
 *   <div class="u-center-horizontal" style="width: 25px; height: 25px; background-color: red"></div>
 * </div>
 * ```
 */
.u-center,
.u-center-vertical,
.u-center-horizontal {
  margin: auto;
  position: absolute; }

.u-center {
  top: 0;
  left: 0;
  bottom: 0;
  right: 0; }

.u-center-vertical {
  top: 0;
  bottom: 0; }

.u-center-horizontal {
  left: 0;
  right: 0; }

/**
 * @title Cards
 * @section Cards
 *
 * A card is a generic content container that can content a header and content section indicated by the `content` class.
 *
 * ```html
 * <div class="card">
 *   <header>Title</header>
 *   <div class="content">
 *     Some content for this card
 *   </div>
 * </div>
 * ```
 */
.card {
  position: relative;
  display: inline-block;
  margin: 15px 0;
  border-radius: 3px;
  border: 1px solid gray; }
  .card header {
    border-radius: 3px 3px 0 0;
    color: #869edb;
    font-weight: 600;
    padding: 5px;
    background-color: #efefef;
    position: relative;
    /**
     * @section Cards
     * @subsection Header Border
     *
     * You can add a border to the header by adding the `border` class to the header.
     *
     * ```html
     * <div class="card">
     *   <header class="border">Title</header>
     *   <div class="content">
     *     Some content for this card
     *   </div>
     * </div>
     * ```
     */
    /**
     * @section Cards
     * @subsection Header Actions
     *
     * You can provide actions element to the header by adding the `actions` class to the element in the header.
     *
     * ```html
     * <div class="card">
     *   <header>Title<span class="actions close"><img class="svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" /></span></header>
     *   <div class="content">
     *     Some content for this card
     *   </div>
     * </div>
     * ```
     *
     * You can even have multiple actions.
     *
     * ```html
     * <div class="card">
     *   <header>Title<span class="actions close"><img class="svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/question-mark.svg" /><img class="svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" /></span></header>
     *   <div class="content">
     *     Some content for this card
     *   </div>
     * </div>
     * ```
     */ }
    .card header:after {
      content: "";
      display: table;
      clear: both; }
    .card header ~ .content {
      border-radius: 0 0 3px 3px; }
    .card header.border {
      border-bottom: 1px solid #414141;
      border-radius: 3px 3px 0 0; }
    .card header > .actions {
      cursor: pointer;
      position: absolute;
      top: 5px;
      right: 5px; }
      .card header > .actions svg {
        fill: #869edb;
        width: 11px;
        height: 11px;
        margin-left: 3px; }
        .card header > .actions svglast-child {
          margin-left: 0; }
  .card .content {
    border-radius: 3px;
    background-color: white;
    padding: 8px; }

/**
 * @section Buttons
 * @subsection Button Size
 *
 * This mixin adds the appropriate sizing properties for the different support sizes.  The following sizes are supported:
 *
 * - small
 * - normal (default)
 * - large
 * - largest
 *
 * @mixin button-size
 * @param $size string Button size
 */
/**
 * @section Buttons
 * @subsection Button Color
 *
 * This mixin adds the appropriate shadow colors for the different button states.
 *
 * @mixin button-color
 * @param $button-main-color color Button main background color
 * @param $button-text-color color Button text color
 */
/**
 * @section Buttons
 *
 * Standard button.
 *
 * ```html
 * <button>Default</button>
 * ```
 */
button {
  font-size: 1.2rem;
  padding: 4px 12px;
  /**
   * @section Buttons
   * @subsection Quiet
   *
   * A quiet button is a button that looks like regular test until you hover over it (using the `quiet` class).
   *
   * ```html
   * <button>Default</button>
   * ```
   */
  /**
   * @section Buttons
   * @subsection Border
   *
   * If you wish to added a border to the button, add the `border` class.
   *
   * ```html
   * <button class="border">Border</button>
   * ```
   */
  border-radius: 3px;
  position: relative;
  border: none;
  font-weight: 400;
  cursor: pointer;
  text-transform: uppercase;
  /**
   * @section Buttons
   * @subsection Sizes
   *
   * Button can have 3 additional sizes in addition to the defualt size.
   *
   * You can add a `small` class.
   *
   * ```html
   * <button class="small">Small</button>
   * ```
   *
   * You can add a `large` class.
   *
   * ```html
   * <button class="large">Large</button>
   * ```
   *
   * You can add a `largest` class.
   *
   * ```html
   * <button class="largest">Largest</button>
   * ```
   */
  /**
   * @section Buttons
   * @subsection States
   *
   * Buttons can have a number of differnt states that change the color of the button.
   *
   * The `primary` class can be added to indicate the primary action to be done.
   *
   * ```html
   * <button class="primary">Primary</button>
   * ```
   *
   * The `caution` class can be added to indicate that you should be careful in clicking the button.
   *
   * ```html
   * <button class="caution">Caution</button>
   * ```
   *
   * The `danger` class can be added to indicate a negative action will be performed when clicking the button (like removing a record).
   *
   * ```html
   * <button class="danger">Danger</button>
   * ```
   *
   * The `safe` class can be added to indicate a positive action will be performed when clicking the button (like adding a record).
   *
   * ```html
   * <button class="safe">Safe</button>
   * ```
   */
  /**
   * @section Buttons
   * @subsection Disabled
   *
   * Disabled button will automatically appear faded and have the proper cursor to indicate the button can't be clicked on.
   *
   * ```html
   * <button disabled>Disabled</button>
   * ```
   */
  /**
   * @section Buttons
   * @subsection Square
   *
   * Button are rounded by default however you can add the `square` class to remove the rounded corners.
   *
   * ```html
   * <button class="square">Square</button>
   * ```
   */ }
  button.quiet {
    color: #414141; }
  button:not(.quiet) {
    color: white;
    background-color: #aaaaaa; }
  button.border {
    border: 1px solid #5e5e5e; }
  button:hover:not([disabled]) {
    background-color: #919191; }
  button:active:not([disabled]), button.is-active:not([disabled]) {
    background-color: #919191; }
  button:focus {
    outline: none; }
  button.small {
    font-size: 1rem;
    padding: 3px 9px; }
  button.large {
    font-size: 1.8rem;
    padding: 5px 15px; }
  button.largest {
    font-size: 2.4rem;
    padding: 6px 18px; }
  button.primary {
    /**
     * @section Buttons
     * @subsection Quiet
     *
     * A quiet button is a button that looks like regular test until you hover over it (using the `quiet` class).
     *
     * ```html
     * <button>Default</button>
     * ```
     */
    /**
     * @section Buttons
     * @subsection Border
     *
     * If you wish to added a border to the button, add the `border` class.
     *
     * ```html
     * <button class="border">Border</button>
     * ```
     */ }
    button.primary.quiet {
      color: #414141; }
    button.primary:not(.quiet) {
      color: white;
      background-color: #869edb; }
    button.primary.border {
      border: 1px solid #2e4c9a; }
    button.primary:hover:not([disabled]) {
      background-color: #5f7ecf; }
    button.primary:active:not([disabled]), button.primary.is-active:not([disabled]) {
      background-color: #5f7ecf; }
  button.caution {
    /**
     * @section Buttons
     * @subsection Quiet
     *
     * A quiet button is a button that looks like regular test until you hover over it (using the `quiet` class).
     *
     * ```html
     * <button>Default</button>
     * ```
     */
    /**
     * @section Buttons
     * @subsection Border
     *
     * If you wish to added a border to the button, add the `border` class.
     *
     * ```html
     * <button class="border">Border</button>
     * ```
     */ }
    button.caution.quiet {
      color: #414141; }
    button.caution:not(.quiet) {
      color: white;
      background-color: #cfcf00; }
    button.caution.border {
      border: 1px solid #363600; }
    button.caution:hover:not([disabled]) {
      background-color: #9c9c00; }
    button.caution:active:not([disabled]), button.caution.is-active:not([disabled]) {
      background-color: #9c9c00; }
  button.danger {
    /**
     * @section Buttons
     * @subsection Quiet
     *
     * A quiet button is a button that looks like regular test until you hover over it (using the `quiet` class).
     *
     * ```html
     * <button>Default</button>
     * ```
     */
    /**
     * @section Buttons
     * @subsection Border
     *
     * If you wish to added a border to the button, add the `border` class.
     *
     * ```html
     * <button class="border">Border</button>
     * ```
     */ }
    button.danger.quiet {
      color: #414141; }
    button.danger:not(.quiet) {
      color: white;
      background-color: #b03a38; }
    button.danger.border {
      border: 1px solid #3c1413; }
    button.danger:hover:not([disabled]) {
      background-color: #892d2c; }
    button.danger:active:not([disabled]), button.danger.is-active:not([disabled]) {
      background-color: #892d2c; }
  button.safe {
    /**
     * @section Buttons
     * @subsection Quiet
     *
     * A quiet button is a button that looks like regular test until you hover over it (using the `quiet` class).
     *
     * ```html
     * <button>Default</button>
     * ```
     */
    /**
     * @section Buttons
     * @subsection Border
     *
     * If you wish to added a border to the button, add the `border` class.
     *
     * ```html
     * <button class="border">Border</button>
     * ```
     */ }
    button.safe.quiet {
      color: #414141; }
    button.safe:not(.quiet) {
      color: white;
      background-color: #3eb038; }
    button.safe.border {
      border: 1px solid #153c13; }
    button.safe:hover:not([disabled]) {
      background-color: #30892c; }
    button.safe:active:not([disabled]), button.safe.is-active:not([disabled]) {
      background-color: #30892c; }
  button[disabled] {
    opacity: 0.5;
    cursor: not-allowed; }
  button.square {
    border-radius: 0; }

/**
 * @section Button Drop Down
 *
 * A button that when clicked expands a drop down menu.
 *
 * ```html
 * <div class="button-drop-down">
 *   <button >test</button>
 *   <div class="content">content</div>
 * </div>
 * ```
 *
 * When the container has the `is-active` class, the content for the drop down is displayed.
 *
 * ```html
 * <div class="button-drop-down is-active" style="margin-bottom: 30px;">
 *   <button >test</button>
 *   <div class="content" style="width: 200px;">content</div>
 * </div>
 * ```
 *
 * You can use button classes too:
 *
 * ```html
 * <div class="button-drop-down is-active" style="margin-bottom: 30px;">
 *   <button class="small">test</button>
 *   <div class="content" style="width: 200px;">content</div>
 * </div>
 * ```
 *
 * ```html
 * <div class="button-drop-down is-active" style="margin-bottom: 30px;">
 *   <button class="large">test</button>
 *   <div class="content" style="width: 200px;">content</div>
 * </div>
 * ```
 *
 * ```html
 * <div class="button-drop-down is-active" style="margin-bottom: 30px;">
 *   <button class="largest">test</button>
 *   <div class="content" style="width: 200px;">content</div>
 * </div>
 * ```
 */
.button-drop-down {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  display: inline-block;
  position: relative;
  color: white;
  font-weight: 200;
  display: inline-block;
  /**
   * @section Button Drop Down
   * @subsection Not Positioned
   *
   * @TODO: example
   *
   * By default, the content of the button drop down is position absolute however if you don't want this (useful if you need something like fixed positioning),
   * you can add the `not-positioned` class to the container.
   */
  /**
   * @section Button Drop Down
   * @subsection Border
   *
   * If you wish to have a border, add a `border` class to the container.
   *
   * ```html
   * <div class="button-drop-down border">
   *   <button >test</button>
   *   <div class="content" style="width: 200px;">content</div>
   * </div>
   * ```
   *
   * ```html
   * <div class="button-drop-down border is-active" style="margin-bottom: 30px;">
   *   <button >test</button>
   *   <div class="content" style="width: 200px;">content</div>
   * </div>
   * ```
   */
  /**
   * @section Button Drop Down
   * @subsection Left
   *
   * By default, the button drop down content extends over the right side of the button.  To make the button drop down content extend over the left side of the,
   * button, add a `left` class to the container.
   *
   * ```html
   * <div style="position: relative; height: 60px;">
   *   <div class="button-drop-down left is-active" style="margin-bottom: 30px;position: absolute; right: 0;">
   *     <button >test</button>
   *     <div class="content" style="width: 200px;">content</div>
   *   </div>
   * </div>
   * ```
   */
  /**
   * @section Button Drop Down
   * @subsection Square
   *
   * By default, the button drop down has rounded corners but if you don't want that, add a `square` class to the container.
   *
   * ```html
   * <div class="button-drop-down square is-active" style="margin-bottom: 30px;">
   *   <button >test</button>
   *   <div class="content" style="width: 200px;">content</div>
   * </div>
   * ```
   */ }
  .button-drop-down.is-active button {
    border-bottom: none;
    border-radius: 3px 3px 0 0;
    z-index: 502; }
  .button-drop-down.is-active button {
    background-color: #777777; }
  .button-drop-down.is-active .content {
    display: inherit; }
  .button-drop-down button {
    z-index: 495; }
  .button-drop-down .content {
    display: none;
    border-radius: 0 3px 3px 3px;
    padding: 5px;
    background-color: #777777;
    z-index: 501; }
  .button-drop-down:not(.not-positioned) > .content {
    position: absolute;
    left: 0;
    width: 100%;
    top: 100%; }
  .button-drop-down.border.is-active button {
    border-bottom: none; }
  .button-drop-down.border button {
    border: 1px solid black; }
  .button-drop-down.border .content {
    border: 1px solid black;
    top: 97%; }
  .button-drop-down.left .content {
    left: auto;
    right: 0;
    border-radius: 3px 0 3px 3px; }
  .button-drop-down.square button {
    border-radius: 0; }
  .button-drop-down.square .content {
    border-radius: 0; }

/**
 * @section Expander
 *
 * Expander is an element that toggle display of the content.  The container must have the `expander` class and it's dom must have an element with the `handle`
 * class and `content` class.  The content is only visable when the container has a class of `is-active`.
 *
 * ```html
 * <div class="expander">
 *   <div class="handle">Handle</div>
 *   <div class="content">Content</div>
 * </div>
 * ```
 *
 * ```html
 * <div class="expander is-active">
 *   <div class="handle">Handle</div>
 *   <div class="content">Content</div>
 * </div>
 * ```
 */
.expander.is-active > .content {
  display: block; }
.expander > .handle {
  cursor: pointer; }
.expander > .content {
  display: none; }

/**
 * @section Extend Text
 *
 * This component extends the capibilities of your standard text box/textarea elements.
 *
 * **NOTE: The auto complete options container looks a little off in FireFox but that is just a browser issue with the static css.  If you use javascript to position the box (like the Nucleus Angular Extend Text component does), it will look fine.**
 */
.extend-text {
  position: relative;
  display: inline-block;
  /**
   * @section Extend Text
   * @subsection Tagging
   *
   * One functionality of extend text is the ability of tagging or selecting multiple values with in a text box.
   *
   * ```html
   * <div class="extend-text is-active" style="width: 500px;">
   *   <input class="display" type="text" />
   *   <div class="tag-container" style="top: 4px; left: 4px;">
   *     <ul class="tags">
   *       <li class="tag">
   *         <span data-value="tag-value">tag value</span>
   *         <img class="remove svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" />
   *       </li>
   *       <li class="tag">
   *         <span data-value="tag-value2">tag value2</span>
   *         <img class="remove svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" />
   *       </li>
   *       <li class="tag">
   *         <span data-value="tag-value3">tag value3</span>
   *         <img class="remove svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" />
   *       </li>
   *     </ul>
   *   </div>
   * </div>
   * ```
   */
  /**
   * @section Extend Text
   * @subsection Auto Complete
   *
   * One functionality of extend text is the ability of doing an auto complete.
   *
   * ```html
   * <div class="extend-text auto-complete" style="width: 500px;">
   *   <div class="container">
   *     <input class="display" type="text" />
   *   </div>
   * </div>
   * ```
   *
   * ```html
   * <div class="extend-text is-active auto-complete" style="width: 500px;">
   *   <input class="display" type="text" />
   *   <div class="auto-complete-options" style="top: 25px;">
   *     <ul>
   *       <li data-value="auto complete option1">auto complete option1</li>
   *       <li data-value="auto complete option1">auto complete option1</li>
   *       <li data-value="auto complete option1">auto complete option1</li>
   *     </ul>
   *   </div>
   * </div>
   * ```
   */
  /**
   * @section Extend Text
   * @subsection Auto-Complete - New Indicator
   *
   * If you want to allow the use to enter a value that the auto complete does not give you, you can use the `new-indicator` class.
   *
   * ```html
   * <div class="extend-text auto-complete" style="width: 500px;">
   *   <input class="display" type="text" />
   *   <div class="new-indicator">New</div>
   * </div>
   * ```
   */ }
  .extend-text.auto-complete.is-active .display {
    border-radius: 5px 5px 0 0; }
  .extend-text input {
    width: 100%; }
  .extend-text ul,
  .extend-text li {
    margin: 0;
    padding: 0; }
  .extend-text ul {
    cursor: text; }
  .extend-text li {
    cursor: pointer; }
  .extend-text .tag-container {
    position: absolute;
    z-index: 2; }
  .extend-text .tag {
    display: inline-block;
    margin: 0 6px 0 0;
    float: left;
    position: relative;
    background-color: #b8d7eb;
    border: 1px solid #5f868e;
    border-radius: 2px;
    padding: 0 2px;
    /**
     * @section Extend Text
     * @subsection Tagging - Selected Tag
     *
     * Add the `selected` class to a tag to change the border color.
     *
     * ```html
     * <div class="extend-text is-active" style="width: 500px;">
     *   <input class="display" type="text" />
     *   <div class="tag-container" style="top: 4px; left: 4px;">
     *     <ul class="tags">
     *       <li class="tag">
     *         <span data-value="tag-value">tag value</span>
     *       </li>
     *       <li class="tag selected">
     *         <span data-value="tag-value2">tag value2</span>
     *       </li>
     *       <li class="tag">
     *         <span data-value="tag-value3">tag value3</span>
     *       </li>
     *     </ul>
     *   </div>
     * </div>
     * ```
     */
    /**
     * @section Extend Text
     * @subsection Tagging - Remove Icon
     *
     * You can also add an svg icon to indicate you want to remove the tag by adding the svg with the `remove` class.
     *
     * ```html
     * <div class="extend-text is-active" style="width: 500px;">
     *   <input class="display" type="text" />
     *   <div class="tag-container" style="top: 4px; left: 4px;">
     *     <ul class="tags">
     *       <li class="tag">
     *         <span data-value="tag-value">tag value</span>
     *         <img class="remove svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" />
     *       </li>
     *       <li class="tag">
     *         <span data-value="tag-value2">tag value2</span>
     *         <img class="remove svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" />
     *       </li>
     *       <li class="tag">
     *         <span data-value="tag-value3">tag value3</span>
     *         <img class="remove svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" />
     *       </li>
     *     </ul>
     *   </div>
     * </div>
     * ```
     */ }
    .extend-text .tag.selected {
      border-color: red; }
    .extend-text .tag .remove {
      cursor: pointer;
      width: 10px;
      height: 10px; }
  .extend-text .display {
    z-index: 1;
    overflow: hidden;
    height: inherit;
    margin: 0; }
  .extend-text .auto-complete-options {
    position: absolute;
    border: 1px solid #595959;
    background-color: white;
    z-index: 1;
    border-top: none;
    max-height: 300px;
    overflow: auto;
    width: 100%;
    border-radius: 0 0 5px 5px;
    box-shadow: 0 0 4px #091850;
    /**
     * @section Extend Text
     * @subsection Auto Complete - Focused Item
     *
     * To highlight an auto complete option, add the `is-focused` class to the item.
     *
     * ```html
     * <div class="extend-text is-active auto-complete" style="width: 500px;">
     *   <input class="display" type="text" />
     *   <div class="auto-complete-options" style="top: 25px;">
     *     <ul>
     *       <li data-value="auto complete option1">auto complete option1</li>
     *       <li class="is-focused" data-value="auto complete option1">auto complete option1</li>
     *       <li data-value="auto complete option1">auto complete option1</li>
     *     </ul>
     *   </div>
     * </div>
     * ```
     */ }
    .extend-text .auto-complete-options li {
      padding: 3px 6px; }
    .extend-text .auto-complete-options .is-focused {
      background-color: #e1e9f6; }
  .extend-text .new-indicator {
    position: absolute;
    top: 6px;
    right: 8px; }

/**
 * @section Extend Text
 * @subsection Auto Complete & Tagging
 *
 * The Auto Complete and Tagging styling can co-exist.
 *
 * ```html
 * <div class="extend-text is-active auto-complete" style="width: 500px;">
 *   <input class="display" type="text" />
 *   <div class="tag-container" style="top: 4px; left: 4px;">
 *     <ul class="tags">
 *       <li class="tag">
 *         <span data-value="tag-value">tag value</span>
 *         <img class="remove svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" />
 *       </li>
 *       <li class="tag">
 *         <span data-value="tag-value2">tag value2</span>
 *         <img class="remove svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" />
 *       </li>
 *       <li class="tag">
 *         <span data-value="tag-value3">tag value3</span>
 *         <img class="remove svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" />
 *       </li>
 *     </ul>
 *   </div>
 *   <div class="auto-complete-options" style="top: 25px;">
 *     <ul>
 *       <li data-value="auto complete option1">auto complete option1</li>
 *       <li class="is-focused" data-value="auto complete option1">auto complete option1</li>
 *       <li data-value="auto complete option1">auto complete option1</li>
 *     </ul>
 *   </div>
 * </div>
 * ```
 */
/**
 * @section Extend Text
 * @subsection Validation
 *
 * The extend text component also works with the input elements validation.
 *
 * Valid
 *
 * ```html
 * <div class="input-element valid">
 *   <div class="container">
 *     <div class="extend-text is-active auto-complete" style="width: 500px;">
 *       <input class="display" type="text" />
 *       <div class="tag-container" style="top: 4px; left: 4px;">
 *         <ul class="tags">
 *           <li class="tag">
 *             <span data-value="tag-value">tag value</span>
 *             <img class="remove svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" />
 *           </li>
 *           <li class="tag">
 *             <span data-value="tag-value2">tag value2</span>
 *             <img class="remove svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" />
 *           </li>
 *           <li class="tag">
 *             <span data-value="tag-value3">tag value3</span>
 *             <img class="remove svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" />
 *           </li>
 *         </ul>
 *       </div>
 *       <div class="auto-complete-options" style="top: 25px;">
 *         <ul>
 *           <li data-value="auto complete option1">auto complete option1</li>
 *           <li class="is-focused" data-value="auto complete option1">auto complete option1</li>
 *           <li data-value="auto complete option1">auto complete option1</li>
 *         </ul>
 *       </div>
 *     </div>
 *   </div>
 *   <img class="icon svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/check.svg" />
 * </div>
 * ```
 *
 * Invalid
 *
 * ```html
 * <div class="input-element invalid">
 *   <div class="container">
 *     <div class="extend-text is-active auto-complete" style="width: 500px;">
 *       <input class="display" type="text" />
 *       <div class="tag-container" style="top: 4px; left: 4px;">
 *         <ul class="tags">
 *           <li class="tag">
 *             <span data-value="tag-value">tag value</span>
 *             <img class="remove svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" />
 *           </li>
 *           <li class="tag">
 *             <span data-value="tag-value2">tag value2</span>
 *             <img class="remove svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" />
 *           </li>
 *           <li class="tag">
 *             <span data-value="tag-value3">tag value3</span>
 *             <img class="remove svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" />
 *           </li>
 *         </ul>
 *       </div>
 *       <div class="auto-complete-options" style="top: 25px;">
 *        <ul>
 *           <li data-value="auto complete option1">auto complete option1</li>
 *           <li class="is-focused" data-value="auto complete option1">auto complete option1</li>
 *          <li data-value="auto complete option1">auto complete option1</li>
 *         </ul>
 *       </div>
 *     </div>
 *   </div>
 *   <div class="tooltip">
 *     <div class="handle">
 *       <img class="svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" />
 *     </div>
 *     <div class="content">Invalid</div>
 *   </div>
 * </div>
 * ```
 */
.invalid .extend-text .auto-complete-options {
  border-color: #b03a38;
  box-shadow: 0 0 4px #b03a38; }

.valid .extend-text .auto-complete-options {
  border-color: #3eb038;
  box-shadow: 0 0 4px #3eb038; }

/**
 * @section Forms
 *
 * These are the styles available for displaying forms.
 *
 * By default, `label` and `input` elements each display on there own line unless the `input` is wrapped within the `label`.
 *
 * ```html
 * <form>
 *   <div>
 *     <label for="first-name">First Name</label>
 *     <input id="first-name" type="text" />
 *   </div>
 *   <div>
 *     <label for="last-name">Last Name</label>
 *     <input id="last-name" type="text" />
 *   </div>
 *   <div>
 *     <label for="is-active"><input id="is-active" type="checkbox" /> Is Active</label>
 *   </div>
 *   <div>
 *     <label for="country">Select Country</label>
 *     <select id="country">
 *       <option>USA</option>
 *       <option>Other</option>
 *     </select>
 *   <div>
 *   <div>
 *     <label>Is Admin</label>
 *     <input id="is-admin-yes" name="isAdmin" type="radio"> <label for="is-admin-yes" />Yes</label>
 *     <input id="is-admin-no" name="isAdmin" type="radio" /> <label for="is-admin-no">No</label>
 *   </div>
 * </form>
 * ```
 */
form {
  /**
   * @section Forms
   * @subsection Compact
   *
   * If you wish labels and input to be displayed on the same line regardless of how the dom is structure, add the `compact` class to the form.
   *
   * ```html
   * <form class="compact">
   *   <div>
   *     <label for="first-name">First Name</label>
   *     <input id="first-name" type="text" />
   *   </div>
   *   <div>
   *     <label for="last-name">Last Name</label>
   *     <input id="last-name" type="text" />
   *   </div>
   *   <div>
   *     <input id="is-active" type="checkbox" /> <label for="is-active">Is Active</label>
   *   </div>
   *   <div>
   *     <label for="country">Select Country</label>
   *     <select id="country">
   *       <option>USA</option>
   *       <option>Other</option>
   *     </select>
   *   <div>
   *   <div>
   *     <label>Is Admin</label>
   *     <input id="is-admin-yes" name="isAdmin" type="radio"> <label for="is-admin-yes" />Yes</label>
   *     <input id="is-admin-no" name="isAdmin" type="radio" /> <label for="is-admin-no">No</label>
   *   </div>
   * </form>
   * ```
   */ }
  form.compact label,
  form.compact .label {
    display: inline-block;
    text-align: right;
    padding-right: 0 10px 0 0; }
  form .input-text {
    display: inline-block; }

label,
.label {
  display: block;
  margin: 0 0 3px 0; }

input ~ label {
  display: inline-block; }

input:not([type]),
input[type="text"],
textarea {
  border-radius: 5px;
  border: 1px solid #595959;
  padding: 4px;
  outline: none; }
  input:not([type]):focus,
  input[type="text"]:focus,
  textarea:focus {
    border-color: #091850;
    box-shadow: 0 0 4px #091850; }

input[disabled] {
  opacity: 0.7; }

select {
  background: transparent;
  border: 0;
  border-radius: 5px;
  height: 25px;
  outline: none;
  border: 1px solid #595959; }

/**
 * @section Input Element
 *
 * There is a special structure that can be used by added the `input-element` class to a containing element to support custom data validation styling.
 *
 * ```html
 * <form>
 *   <div>
 *     <label for="first-name">First Name</label>
 *     <div class="input-element valid">
 *       <input id="first-name" type="text" />
 *       <img class="icon svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/check.svg" />
 *     </div>
 *   </div>
 *   <div>
 *     <label for="last-name">Last Name</label>
 *     <div class="input-element valid">
 *       <input id="last-name" type="text" />
 *       <img class="icon svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/check.svg" />
 *     </div>
 *   </div>
 *   <div>
 *     <div class="input-element invalid">
 *       <input id="is-active" type="checkbox" /> <label for="is-active">Is Active</label>
 *       <div class="tooltip">
 *         <div class="handle"><img class="svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" /></div>
 *         <div class="content">Error message</div>
 *       </div>
 *     </div>
 *   </div>
 *   <div>
 *     <label for="country">Select Country</label>
 *     <div class="input-element invalid" data-input-type="select">
 *       <select id="country" style="width: 100px;">
 *         <option>USA</option>
 *         <option>Other</option>
 *       </select>
 *       <div class="tooltip">
 *         <div class="handle"><img class="svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" /></div>
 *         <div class="content">Error message</div>
 *       </div>
 *     </div>
 *   <div>
 *   <div>
 *     <label for="bio">Bio</label>
 *     <div class="input-element invalid">
 *       <textarea id="bio">Bio</textarea>
 *       <div class="tooltip">
 *         <div class="handle"><img class="svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" /></div>
 *         <div class="content">Error message</div>
 *       </div>
 *     </div>
 *   <div>
 *   <div>
 *     <label>Is Admin</label>
 *     <div class="input-element valid">
 *       <input id="is-admin-yes" name="isAdmin" type="radio"> <label for="is-admin-yes" />Yes</label>
 *       <input id="is-admin-no" name="isAdmin" type="radio" /> <label for="is-admin-no">No</label>
 *       <img class="icon svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/check.svg" />
 *     </div>
 *   </div>
 * </form>
 * ```
 *
 * Compact form.
 *
 * ```html
 * <form class="compact">
 *   <div>
 *     <label for="first-name">First Name</label>
 *     <div class="input-element valid">
 *       <input id="first-name" type="text" />
 *       <img class="icon svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/check.svg" />
 *     </div>
 *   </div>
 *   <div>
 *     <label for="last-name">Last Name</label>
 *     <div class="input-element valid">
 *       <input id="last-name" type="text" />
 *       <img class="icon svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/check.svg" />
 *     </div>
 *   </div>
 *   <div>
 *     <div class="input-element invalid">
 *       <input id="is-active" type="checkbox" /> <label for="is-active">Is Active</label>
 *       <div class="tooltip">
 *         <div class="handle"><img class="svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" /></div>
 *         <div class="content">Error message</div>
 *       </div>
 *     </div>
 *   </div>
 *   <div>
 *     <label for="country">Select Country</label>
 *     <div class="input-element invalid" data-input-type="select">
 *       <select id="country" style="width: 100px;">
 *         <option>USA</option>
 *         <option>Other</option>
 *       </select>
 *       <div class="tooltip">
 *         <div class="handle"><img class="svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" /></div>
 *         <div class="content">Error message</div>
 *       </div>
 *     </div>
 *   <div>
 *   <div>
 *     <label for="bio">Bio</label>
 *     <div class="input-element invalid">
 *       <textarea id="bio">Bio</textarea>
 *       <div class="tooltip">
 *         <div class="handle"><img class="svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" /></div>
 *         <div class="content">Error message</div>
 *       </div>
 *     </div>
 *   <div>
 *   <div>
 *     <label>Is Admin</label>
 *     <div class="input-element valid">
 *       <input id="is-admin-yes" name="isAdmin" type="radio"> <label for="is-admin-yes" />Yes</label>
 *       <input id="is-admin-no" name="isAdmin" type="radio" /> <label for="is-admin-no">No</label>
 *       <img class="icon svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/check.svg" />
 *     </div>
 *   </div>
 * </form>
 * ```
 */
.input-element {
  display: inline-block;
  position: relative;
  /**
   * @section Input Element
   * @subsection Plain
   *
   * By default, the `input` element will be colored based on validation however if you wish to keep in `input` itself plain, add the `plain` class to the
   * container element.
   *
   * ```html
   * <label>Label:</label>
   * <div class="input-element invalid plain">
   *   <input type="text" />
   *   <img class="icon svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" />
   * </div>
   * <label>Label:</label>
   * <div class="input-element valid plain">
   *   <input type="text" />
   *   <img class="icon svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/check.svg" />
   * </div>
   * ```
   */
  /**
   * @section Input Element
   * @subsection Icon
   *
   * You you provide an icon for the input element that is SVG, you just need to add the `icon` class to the element.
   *
   * ```html
   * <label>Label:</label>
   * <div class="input-element valid">
   *   <input type="text" />
   *   <img class="icon svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/check.svg" />
   * </div>
   * ```
   */
  /**
   * @section Input Element
   * @subsection Tooltip
   *
   * You you provide tooltip to for example, display an error message if the validation failed.
   *
   * ```html
   * <label>Label:</label>
   * <div class="input-element invalid">
   *   <input type="text" />
   *   <div class="tooltip">
   *     <div class="handle"><img class="svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" /></div>
   *     <div class="content">Error message</div>
   *   </div>
   * </div>
   * ```
   */
  /**
   * @section Input Element
   * @subsection Messages
   *
   * You can display messages within an input element if you don't want to display them as a tooltip
   *
   * ```html
   * <label>Label:</label>
   * <div class="input-element invalid">
   *   <input type="text" />
   *   <div class="message danger">
   *     <div>This field is required</div>
   *     <div>this field is too short</div>
   *   </div>
   * </div>
   * ```
   */ }
  .input-element input:not([type]),
  .input-element input[type="text"],
  .input-element textarea {
    padding-right: 25px; }
  .input-element .tooltip,
  .input-element .icon {
    position: absolute;
    top: 4px;
    right: 5px; }
  .input-element select ~ .tooltip,
  .input-element select ~ .icon {
    right: 22px; }
  .input-element input[type="checkbox"] ~ .tooltip,
  .input-element input[type="checkbox"] ~ .icon {
    top: 0px;
    right: -21px; }
  .input-element input[type="radio"] ~ .tooltip,
  .input-element input[type="radio"] ~ .icon {
    top: -2px;
    right: -21px; }
  .input-element .message {
    display: block;
    margin-top: 10px; }
  .input-element:not(.plain) {
    /**
     * @section Input Element
     * @subsection Invalid
     *
     * If an input element is invalid, you need to add the `invalid` class on the container.
     *
     * ```html
     * <label>Label:</label>
     * <div class="input-element invalid">
     *   <input type="text" />
     *   <img class="icon svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" />
     * </div>
     * ```
     */
    /**
     * @section Input Element
     * @subsection Valid
     *
     * If an input element is valid, you need to add the `valid` class on the container.
     *
     * ```html
     * <label>Label:</label>
     * <div class="input-element valid">
     *   <input type="text" />
     *   <img class="icon svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/check.svg" />
     * </div>
     * ```
     */ }
    .input-element:not(.plain).invalid input,
    .input-element:not(.plain).invalid textarea,
    .input-element:not(.plain).invalid select {
      border-color: #b03a38;
      background-color: #f9eeee; }
      .input-element:not(.plain).invalid input:focus,
      .input-element:not(.plain).invalid textarea:focus,
      .input-element:not(.plain).invalid select:focus {
        box-shadow: 0 0 4px #b03a38; }
    .input-element:not(.plain).valid input,
    .input-element:not(.plain).valid textarea,
    .input-element:not(.plain).valid select {
      border-color: #3eb038;
      background-color: #eef9ee; }
      .input-element:not(.plain).valid input:focus,
      .input-element:not(.plain).valid textarea:focus,
      .input-element:not(.plain).valid select:focus {
        box-shadow: 0 0 4px #3eb038; }
  .input-element.invalid .icon,
  .input-element.invalid .tooltip .handle {
    fill: #7a0200; }
  .input-element.invalid .tooltip .content {
    color: #7a0200; }
  .input-element.valid .icon,
  .input-element.valid .tooltip .handle {
    fill: #007e01; }
  .input-element.valid .tooltip .content {
    color: #007e01; }

form.compact .input-element input[type="checkbox"] ~ .tooltip,
form.compact .input-element input[type="checkbox"] ~ .icon {
  top: 0px; }
form.compact .input-element input[type="radio"] ~ .tooltip,
form.compact .input-element input[type="radio"] ~ .icon {
  top: -2px; }

/**
 * @section Notify
 *
 * Notify is a way to unobtrusively display a message to the user, be default it display in the top right corner.
 *
 * ```html
 * <a id="default" class="show-notify" href>click me to show default notify (auto removed in 2 seconds)</a>
 * <div class="notify message notice" data-id="default">
 *   <img class="icon svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/info.svg" />
 *   <div class="content">This is a notification message.</div>
 * </div>
 * ```
 *
 * Notify elements are `position: fixed` so just add `top`/`bottom`/`left`/`right` to the container to position it.
 *
 * ```html
 * <a id="positioned" class="show-notify" href>click me to show positioned notify (auto removed in 2 seconds)</a>
 * <div class="notify message danger" data-id="positioned" style="top: 300px; left: 150px; right: auto;">
 *   <img class="icon svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" />
 *   <div class="content">This is a positioned notification message.</div>
 * </div>
 * ```
 *
 * <script type="text/javascript">
 * $(document).ready(function() {
 *   $('.notify').hide();
 *
 *   $('.show-notify').click(function(event) {
 *     event.preventDefault();
 *     $('body').append($('[data-id=' + $(this).attr('id') + ']').clone().show());
 *     setTimeout(function() {
 *       $('body > .notify').remove();
 *     }, 2000);
 *   });
 * });
 * </script>
 */
.notify {
  position: fixed;
  top: 15px;
  right: 15px;
  z-index: 9999;
  display: inline-block; }
  .notify.absolute {
    position: absolute; }

/**
 * @section Site Loader
 *
 * Site loader in a way to indicate the the site is working.
 */
/**
 * @section Site Loader
 * @subsection Blocking
 *
 * @TODO: MAke it possible to do blocking but display like a non-blocking (display content but don't let the user click on anything).
 *
 * The blocking site loader take the full screen and blocks the user from doing anything while the loader is up.
 *
 * ```html
 * <a class="show-site-loader" href>click me to show blocking site loader (auto removed in 2 seconds)</a>
 * <div class="site-loader">
 *   <div class="text">The application is loading...</div>
 * </div>
 * ```
 *
 * <script type="text/javascript">
 * $(document).ready(function() {
 *   $('.show-site-loader').click(function(event) {
 *     event.preventDefault();
 *     $('.site-loader').addClass('is-active');
 *
 *     setTimeout(function() {
 *      $('.site-loader').removeClass('is-active');
 *     }, 2000);
 *   });
 * });
 * </script>
 */
.site-loader {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: white;
  z-index: 10001;
  display: none; }
  .site-loader.is-active {
    display: block; }
  .site-loader .text {
    padding: 50px 0 0 0;
    z-index: 10001;
    text-align: center; }

/**
 * @section Site Loader
 * @subsection Non-Blocking
 *
 * The non-blocking loaded is used let the user know the application is working but they can still click around.  This used a specially styled notify/message element.
 *
 * ```html
 * <a class="show-non-blocking" href>click me to show non-blocking site loader (auto removed in 2 seconds)</a>
 * <div class="notify message danger non-blocking-loader">The site is working...</div>
 * ```
 *
 * <script type="text/javascript">
 * $(document).ready(function() {
 *   $('.notify').hide();
 *
 *   $('.show-non-blocking').click(function(event) {
 *     event.preventDefault();
 *     $('body').append($('.notify').clone().show());
 *     setTimeout(function() {
 *       $('body > .notify').remove();
 *     }, 2000);
 *   });
 * });
 * </script>
 */
.non-blocking-loader.message {
  top: 5px;
  right: 50%;
  margin: 0 -150px 0 0;
  width: 300px;
  text-align: center;
  padding: 0.25em 0.5em;
  border-radius: 3px;
  z-index: 10000; }

/**
 * @section Revealing Panel
 *
 * Revealing panel is a type of modal window system that displays a site overlay and content on top of that overlay.  There are a number of different ways to display the revealing panel.
 *
 * @TODO: add example using absolute positioning
 * @TODO: add animations in (needs to support angular)
 *
 * You can display the panel on all 4 sides on the page.
 *
 * ```html
 * <ul>
 *   <li><a class="show-revealing-panel" href data-position="center">click me to show revealing panel center (auto removed in 2 seconds)</a></li>
 *   <li><a class="show-revealing-panel" href data-position="left">click me to show revealing panel left (auto removed in 2 seconds)</a></li>
 *   <li><a class="show-revealing-panel" href data-position="top">click me to show revealing panel top (auto removed in 2 seconds)</a></li>
 *   <li><a class="show-revealing-panel" href data-position="right">click me to show revealing panel right (auto removed in 2 seconds)</a></li>
 *   <li><a class="show-revealing-panel" href data-position="bottom">click me to show revealing panel bottom (auto removed in 2 seconds)</a></li>
 * </ul>
 * <div class="revealing-panel">
 *   <div class="site-overlay"></div>
 *   <div class="content">Revealing panel content</div>
 * </div>
 * ```
 *
 * <script type="text/javascript">
 * $(document).ready(function() {
 *   $('.show-revealing-panel').click(function(event) {
 *     event.preventDefault();
 *     var position = $(this).data('position');
 *     $('.revealing-panel').addClass('is-active').addClass(position);
 *     $('.site-overlay').addClass('is-active');
 *
 *     setTimeout(function() {
 *       $('.revealing-panel').removeClass('is-active').removeClass(position);
 *       $('.site-overlay').removeClass('is-active');
 *     }, 2000);
 *   });
 * });
 * </script>
 */
/*
 * @section Revealing Panel
 * @subsection Reveal Animation
 *
 * @TODO: have animation based on is-active class
 *
 * Added css for angular animation
 *
 * @mixin reveal-animation
 * @param $property
 * @param $start-value
 * @param $end-value
 * @param $duration
 * @param $timing-function
 * @param $border-side
 * @param $border-size
 * @param $border-type
 * @param $color-gray
 */
.revealing-panel {
  /*&.reveal {
    overflow: visible;
  }

  &.reveal-add,
  &.reveal-remove {
    overflow: hidden;
  }*/ }
  .revealing-panel.absolute > .content {
    position: absolute; }
  .revealing-panel.center > .content {
    top: 50%;
    left: 50%;
    border-radius: 5px;
    display: none;
    border: 1px solid black;
    height: 500px;
    width: 500px;
    margin: calc(-500px / 2) 0 0 calc(-500px / 2);
    /*&.reveal,
    &.reveal-add,
    &.reveal-remove {
      display: inline-block;
    }*/ }
  .revealing-panel.left.is-active > .content {
    width: 500px; }
  .revealing-panel.left > .content {
    top: 0;
    left: 0;
    bottom: 0;
    width: 0; }
  .revealing-panel.right.is-active > .content {
    width: 500px; }
  .revealing-panel.right > .content {
    top: 0;
    right: 0;
    bottom: 0;
    width: 0; }
  .revealing-panel.top.is-active > .content {
    height: 500px; }
  .revealing-panel.top > .content {
    top: 0;
    left: 0;
    right: 0;
    height: 0; }
  .revealing-panel.bottom.is-active > .content {
    height: 500px; }
  .revealing-panel.bottom > .content {
    bottom: 0;
    left: 0;
    right: 0;
    height: 0; }
  .revealing-panel > .content {
    position: fixed;
    z-index: 11000;
    background-color: white;
    overflow: hidden;
    display: none;
    padding: 8px; }
  .revealing-panel.is-active > .content {
    display: block; }

/**
 * @section Site Overlay
 *
 * @TODO: make it possible to put a site overlay within an element inside of only the entire page
 * @TODO: add animation is (needs to support angular animation)
 *
 * A site overlay is an element that fades everything behind it (z-index wise) in order to focus attention to anything above the site overlay.
 *
 * ```html
 * <a class="show-site-overlay" href>click me to show site overlay (auto removed in 2 seconds)</a>
 * <div class="site-overlay"></div>
 * ```
 *
 * <script type="text/javascript">
 * $(document).ready(function() {
 *   $('.show-site-overlay').click(function(event) {
 *     event.preventDefault();
 *     $('.site-overlay').addClass('is-active');
 *
 *     setTimeout(function() {
 *     $('.site-overlay').removeClass('is-active');
 *     }, 2000);
 *   });
 * });
 * </script>
 */
.site-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: black;
  opacity: 0.5;
  z-index: 999;
  display: none;
    /*&.is-active-add,
    &.is-active-remove {
        @include transition(opacity .25s linear);
        display: block;
    }

    &.is-active-add {
        opacity: 0;
    }

    &.is-active-add.is-active-add-active {
        opacity: 0.5;
    }

    &.is-active-remove {
        opacity: 0.5;
    }

    &.is-active-remove.is-active-remove-active {
        opacity: 0;
    }*/ }
  .site-overlay.is-active {
    display: block; }

/**
 * @section SVG Icons
 *
 * SVG icons, default all icons to 16x16.
 *
 * ```html
 * <img class="svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/check.svg" />
 * ```
 */
.svg-icon {
  width: 16px;
  height: 16px; }

/**
 * @section Tabs
 *
 * Tabs allow you segment data and use the same screen space.
 *
 * Tabs are contained in an element with the `tabs-container` class and each tab should also have the `tab` class.
 *
 * Tab contents are in elements with the `tab-content` class.
 *
 * The active tab and tab content should have the `is-active` class.
 *
 * ```html
 * <div class="tabs">
 *   <div class="tabs-container">
 *     <span class="tab">Tab 1</span>
 *     <span class="tab is-active">Tab 2</span>
 *   </div>
 *   <div class="tab-content">Tab content 1</div>
 *   <div class="tab-content is-active">Tab content 2</div>
 * <div>
 * ```
 */
.tabs,
.tabs-container {
  margin: 0;
  padding: 0; }

.tabs .tab {
  padding: 3px;
  display: inline-block;
  border: 1px solid #414141;
  border-bottom: none;
  cursor: pointer; }

.tabs .tab.is-active {
  background-color: #c1c1c1; }

.tabs .tab-content {
  display: none; }

.tabs .tab-content.is-active {
  border-top: 1px solid #414141;
  display: block; }

/**
 * @section Tooltip
 *
 * A tooltip is a way to display additional infomation when a user interact with an element (like hovering the mouse over it on clicking on it).
 *
 * It will content a element with the `handle` class that the user can interact with and an element with the `content` class that is the tooltip content.
 *
 * ```html
 * <div class="tooltip" style="margin-left: 100px;">
 *   <span class="handle"><img class="svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/question-mark.svg" /></span>
 *   <div class="content">This is a tooltip content</div>
 * </div>
 * ```
 *
 * If you add the `is-active` class to the main tooltip container, the content will show.
 *
 * ```html
 * <div class="tooltip is-active" style="margin-left: 100px; margin-bottom: 50px;">
 *   <span class="handle"><img class="svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/question-mark.svg" /></span>
 *   <div class="content">This is a tooltip content</div>
 * </div>
 * ```
 *
 * Positioning the tooltip is just a matter of setting the `top`/`left`/`right`/`bottom` properties.
 *
 * ```html
 * <div class="tooltip is-active" style="margin-left: 250px; margin-bottom: 50px;">
 *   <span class="handle"><img class="svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/question-mark.svg" /></span>
 *   <div class="content" style="left: -158px;">This is a tooltip content</div>
 * </div>
 * ```
 */
.tooltip {
  position: relative; }
  .tooltip.is-active .content {
    display: block; }
  .tooltip .handle {
    display: inline-block; }
  .tooltip .content {
    position: absolute;
    padding: 5px;
    background: white;
    border: 1px solid black;
    border-radius: 3px;
    display: none;
    z-index: 1; }

/**
 * @section Tree
 *
 * Display a list of element is a tree view that can be expanded and collapsed.  The main container must have the `tree` class and the tree data uses `ul`/`li` elements.
 *
 * Tree elements are by default collapsed.  Nodes that have children need to have the `tree` class and nodes that don't have children need to have the `leaf` class.
 *
 * ```html
 * <div class="tree">
 *   <ul>
 *     <li class="tree">
 *       <img class="svg-icon" data-src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/chevron-right.svg" />tree 2
 *       <ul>
 *         <li class="leaf">
 *           <img class="svg-icon" data-src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/file.svg" />leaf 2-1
 *         </li>
 *         <li class="leaf no-icon">leaf 2-2</li>
 *         <li class="tree">
 *           <img class="svg-icon" data-src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/chevron-right.svg" />tree 2-2
 *           <ul>
 *             <li class="leaf no-icon">leaf 2-2-1</li>
 *             <li class="leaf">
 *               <img class="svg-icon" data-src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/aperture.svg" />leaf 2-2-2
 *             </li>
 *             <li class="leaf">
 *               <img class="svg-icon" data-src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/camera-slr.svg" />leaf 2-2-3
 *             </li>
 *           </ul>
 *         </li>
 *         <li class="leaf no-icon">leaf 2-4</li>
 *       </ul>
 *     </li>
 *   </ul>
 * </div>
 * ```
 *
 * In order to expanded a tree, add the `expanded` class to the element with the `tree` class.
 *
 * ```html
 * <div class="tree">
 *   <ul>
 *     <li class="tree expanded">
 *       <img class="svg-icon" data-src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/chevron-bottom.svg" />tree 2
 *       <ul>
 *         <li class="leaf">
 *           <img class="svg-icon" data-src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/file.svg" />leaf 2-1
 *         </li>
 *         <li class="leaf no-icon">leaf 2-2</li>
 *         <li class="tree expanded">
 *           <img class="svg-icon" data-src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/chevron-bottom.svg" />tree 2-2
 *           <ul>
 *             <li class="leaf no-icon">leaf 2-2-1</li>
 *             <li class="leaf">
 *               <img class="svg-icon" data-src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/aperture.svg" />leaf 2-2-2
 *             </li>
 *             <li class="leaf">
 *               <img class="svg-icon" data-src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/camera-slr.svg" />leaf 2-2-3
 *             </li>
 *           </ul>
 *         </li>
 *         <li class="leaf no-icon">leaf 2-4</li>
 *       </ul>
 *     </li>
 *   </ul>
 * </div>
 * ```
 */
.tree li {
  cursor: pointer; }
.tree .leaf {
  padding: 0 0 0 8px; }
  .tree .leaf.no-icon {
    padding: 0 0 0 22px; }
.tree .tree.expanded > ul {
  display: block; }
  .tree .tree.expanded > ul .tree {
    padding: 0 0 0 8px; }
    .tree .tree.expanded > ul .tree.no-icon {
      padding: 0 0 0 22px; }
.tree .tree.no-icon {
  padding: 0 0 0 8px; }
.tree .tree ul {
  display: none; }
.tree svg {
  width: 11px;
  height: 11px;
  margin: 0 3px 0 0; }

/**
 * @section Messages
 *
 * Messages are elements to display a piece of information that stands out from most of the other content.
 *
 * ```html
 * <div class="message">This is a generic message.</div>
 * ```
 */
.message {
  display: inline-block;
  padding: 5px;
  border: 1px solid gray;
  border-radius: 3px;
  /**
   * @section Messages
   * @subsection Icon
   *
   * Messages element can also have an icon.
   *
   * If you are using an icon, then you must wrap you message content in an element with the `content` class.
   *
   * ```html
   * <div class="message">
   *   <img class="icon svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/check.svg" />
   *   <div class="content">This is a generic message.</div>
   * </div>
   * ```
   */
  /**
   * @section Messages
   * @subsection States
   *
   * There are a number of different states that a message can be in that determine the coloring on the message box.
   *
   * You can add the `safe` class to add a greenish color.
   *
   * ```html
   * <div class="message safe">
   *   <img class="icon svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/check.svg" />
   *   <div class="content">This is a generic message.</div>
   * </div>
   * ```
   *
   * You can add the `notice` class to add a blueish color.
   *
   * ```html
   * <div class="message notice">
   *   <img class="icon svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/info.svg" />
   *   <div class="content">This is a generic message.</div>
   * </div>
   * ```
   *
   * You can add the `caution` class to add a yellowish color.
   *
   * ```html
   * <div class="message caution">
   *   <img class="icon svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/question-mark.svg" />
   *   <div class="content">This is a generic message.</div>
   * </div>
   * ```
   *
   * You can add the `danger` class to add a redish color.
   *
   * ```html
   * <div class="message danger">
   *   <img class="icon svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" />
   *   <div class="content">This is a generic message.</div>
   * </div>
   * ```
   */ }
  .message:not(.notify) {
    position: relative; }
  .message .icon {
    position: absolute;
    top: 2px;
    left: 2px;
    width: 21px;
    height: 21px;
    padding: 3px;
    border-radius: 10.5px; }
  .message .content {
    margin-left: 21px; }
  .message.safe {
    background-color: #eef9ee;
    color: #007e01;
    fill: #eef9ee;
    border-color: #3eb038; }
    .message.safe .icon {
      background-color: #3eb038; }
  .message.notice {
    background-color: #e5e5f4;
    color: #0002ab;
    fill: #e5e5f4;
    border-color: #091850; }
    .message.notice .icon {
      background-color: #091850; }
  .message.caution {
    background-color: #f1f2ab;
    color: #7e7e00;
    fill: #f1f2ab;
    border-color: #7e7e00; }
    .message.caution .icon {
      background-color: #7e7e00; }
  .message.danger {
    background-color: #f9eeee;
    color: #7a0200;
    fill: #f9eeee;
    border-color: #b03a38; }
    .message.danger .icon {
      background-color: #b03a38; }

/**
 * @section Progress Bars
 *
 * Progress bars are used to indicate the system is doing something.
 *
 * ```html
 * <div class="progress-bar">
 *   <div class="indicator"></div>
 * </div>
 * ```
 *
 * You give the `indicator` and width percentage from `1%` to `100%`, to indicator the progress.
 *
 * ```html
 * <div class="progress-bar">
 *   <div class="indicator" style="width: 25%;"></div>
 * </div>
 * <div class="progress-bar">
 *   <div class="indicator" style="width: 50%;"></div>
 * </div>
 * <div class="progress-bar">
 *   <div class="indicator" style="width: 75%;"></div>
 * </div>
 * ```
 */
.progress-bar {
  border: 1px solid #b4b4b4;
  position: relative;
  display: inline-block;
  min-width: 40%;
  height: 16px;
  overflow: hidden;
  cursor: pointer;
  border-radius: 8px;
  /**
   * @section Progress Bars
   * @subsection States
   *
   * There are a number of different states that a progress bar can be in that determine the coloring on the progress bar.
   *
   * You can add the `safe` class to add a greenish color.
   *
   * ```html
   * <div class="progress-bar safe">
   *   <div class="indicator" style="width: 50%;"></div>
   * </div>
   * ```
   *
   * You can add the `notice` class to add a blueish color.
   *
   * ```html
   * <div class="progress-bar notice">
   *   <div class="indicator" style="width: 50%;"></div>
   * </div>
   * ```
   *
   * You can add the `caution` class to add a yellowish color.
   *
   * ```html
   * <div class="progress-bar caution">
   *   <div class="indicator" style="width: 50%;"></div>
   * </div>
   * ```
   *
   * You can add the `danger` class to add a redish color.
   *
   * ```html
   * <div class="progress-bar danger">
   *   <div class="indicator" style="width: 50%;"></div>
   * </div>
   * ```
   */ }
  .progress-bar .indicator {
    position: absolute;
    display: block;
    height: 16px;
    background-color: #e6e6e6; }
  .progress-bar.safe {
    border-color: #3eb038; }
    .progress-bar.safe .indicator {
      background-color: #eef9ee; }
  .progress-bar.notice {
    border-color: #091850; }
    .progress-bar.notice .indicator {
      background-color: #e5e5f4; }
  .progress-bar.caution {
    border-color: #7e7e00; }
    .progress-bar.caution .indicator {
      background-color: #f1f2ab; }
  .progress-bar.danger {
    border-color: #b03a38; }
    .progress-bar.danger .indicator {
      background-color: #f9eeee; }

/**
 * @section Search Query
 *
 * One of the features of the extend text element is the search query feature that lets you build a search query when queries advance information.  This does
 * provide some specific styling of it's own.  Note that the search query can only work with the textarea box and not the input text box.
 */
.parsing {
  /**
   * @section Search Query
   * @subsection Input Container
   *
   * In order to property display the search query is different states, the input for the search query must be wrapped in an element with the `inputs` class.
   *
   * ```html
   * <div class="extend-text parsing">
   *   <div class="inputs">
   *     <textarea class="display"></textarea>
   *   </div>
   * </div>
   * ```
   */
  /**
   * @section Search Query
   * @subsection Tooltip/Icon
   *
   * The search query can also provide a validation tooltip/icon to provide additional help/visual queue on the state of the search query
   *
   * ```html
   * <div class="extend-text parsing">
   *   <div class="inputs empty">
   *     <textarea class="display" /></textarea>
   *     <img class="icon svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/question-mark.svg" />
   *   </div>
   * </div>
   * ```
   *
   * ```html
   * <div class="extend-text parsing">
   *   <div class="inputs invalid">
   *     <textarea class="display">firstName = 'John</textarea>
   *     <div class="tooltip">
   *       <span class="handle"><img class="svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/x.svg" /></span>
   *       <div class="content" style="width: 350px;">This is a problem with the query near "= 'John"</div>
   *     </div>
   *   </div>
   * </div>
   * ```
   *
   * ```html
   * <div class="extend-text parsing">
   *   <div class="inputs valid">
   *     <textarea class="display">firstName = 'John'</textarea>
   *     <img class="icon svg-icon" src="http://cdn.jsdelivr.net/open-iconic/1.1.0/svg/check.svg" />
   *   </div>
   * </div>
   * ```
   */ }
  .parsing .inputs {
    height: 25px;
    /**
     * @section Search Query
     * @subsection States
     *
     * A search query element can be in different states which are applied to the element with the `inputs` class.
     *
     * This first state is an empty state indicated by the `empty` class.
     *
     * ```html
     * <div class="extend-text parsing">
     *   <div class="inputs empty">
     *     <textarea class="display" /></textarea>
     *   </div>
     * </div>
     * ```
     *
     * The state is an invalid state indicated by the `invalid` class.
     *
     * ```html
     * <div class="extend-text parsing">
     *   <div class="inputs invalid">
     *     <textarea class="display">firstName = 'John</textarea>
     *   </div>
     * </div>
     * ```
     *
     * The last state is a valid state indicated by the `valid` class.
     *
     * ```html
     * <div class="extend-text parsing">
     *   <div class="inputs valid">
     *     <textarea class="display">firstName = 'John'</textarea>
     *   </div>
     * </div>
     * ```
     */ }
    .parsing .inputs.invalid textarea {
      border-color: #b03a38;
      background-color: #f9eeee; }
    .parsing .inputs.invalid .svg-icon {
      fill: #7a0200; }
    .parsing .inputs.valid textarea {
      border-color: #3eb038;
      background-color: #eef9ee; }
    .parsing .inputs.valid .svg-icon {
      fill: #007e01; }
    .parsing .inputs.empty .svg-icon {
      fill: #414141; }
  .parsing .input-container {
    position: relative;
    display: inline-block; }
  .parsing textarea {
    resize: none;
    padding-right: 30px; }
  .parsing .tooltip {
    position: absolute;
    top: 4px;
    right: 5px; }
    .parsing .tooltip .handle {
      cursor: pointer; }
    .parsing .tooltip .content {
      text-align: center;
      border: 1px solid gray;
      border-radius: 5px; }
  .parsing .icon {
    position: absolute;
    top: 4px;
    right: 5px; }
